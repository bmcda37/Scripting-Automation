#! /bin/bash

exploit_folder="./exploits"

#Run the initial update and install exploitdb if not already installed.
function initial_setup {
    if which exploitdb > /dev/null 2>&1; then
        echo "Exploitdb is installed, updating the searchsploit db..."
        #Update the searchsploit database
        searchsploit -u 
        echo
    else
        echo "Exploitdb was not installed. Attempting install..."
        sudo apt-get update && sudo apt-get install exploitdb
        #Update the searchsploit database
        searchsploit -u
        echo
    fi
}

function main {
#Create the folder to hold the exploits
sudo mkdir -p "$exploit_folder"

while true; do
    read -p "What type of search would you like to perform? Enter (general, case sensitive, exact, title, or cve) " search

    case "$search" in
        "general")
            read -p "What exploits are you looking for?" exploit
            search=$(sudo searchsploit "$exploit")
            echo "$search"
            #Function call
            downloadFile "$search"
            ;;
        "case sensitive")
            read -p "What exploits are you looking for? Case sensitive." exploit
            search=$(sudo searchsploit -c "$exploit")
            #Return the search results
            echo "$search"
            #Function call
            downloadFile "$search"
            ;;
        "exact")
            read -p "What exploits are you looking for? Exact search. " exploit
            search=$(sudo searchsploit -e "$exploit")
            #Return the search results
            echo "$search"
            #Function call
            downloadFile "$search"
            ;;
        "title")
            read -p "What exploits are you looking for? Title search." title
            search=$(sudo searchsploit -t "$title")
            #Return the search results
            echo "$search"
            #Function call
            downloadFile "$search"
            ;;
        "cve")
            read -p "What CVE are you looking for? " cve
            search=$(sudo searchsploit --cve "$cve")
            #Return the search results
            echo "$search"
            #Function call
            downloadFile "$search"
            ;;
        *)
        echo "Invalid option. Please enter 'normal', 'case sensitive', 'exact', 'title', or 'cve'."
            ;;
    esac
    read -p "Do you want to perform another search? (y/n): " search_again
        if [[ "$search_again" != "y" ]]; then
            echo "Exiting the program!"
            break
        fi
    done
}

#Read in the user input for the specific exploit they want to download.
function downloadFile {
    local search="$1"
    read -p "Enter the file name of the exploit you would like to download. Do not include filename extension. Valid input: '12345' " filename
    #Grab all the search results file name excluding the file extension. and starting at the last /.
    file_ids=($(echo "$search" | grep -oP "(?<=/)[0-9]+(?=\.)" | grep "^$filename$" | head -n 1))
    #If the file name is valid, call the hash_check function.
    if [[ " ${file_ids[@]} " =~ " $filename " ]]; then
        hash_check "$filename"
    else
        echo "Invalid file name"
    fi
}


function hash_check {
    local filename="$1"
    local online_hash
    local searchsploit_hash
    local searchsploit_path
    
    #Get the hash value for the specified file from the online exploit db repository.
    online_hash=$(sudo curl -s "https://www.exploit-db.com/download/$filename" | sha256sum | awk '{print $1}')
    
    #Get the hash value for the specified file from the searchsploit directory.
    searchsploit_path=$(sudo searchsploit -p "$filename" | grep "Path:" | awk '{print $2}')

    #Downloads the file from the searchsploit directory and hashes it.
    searchsploit_hash=$( sudo searchsploit -m $filename | sha256sum | awk '{print $1}')

    #I decided to have all my files check with the exploit DB online repository. The reason for this is that the files on the system could potentially be corrupt so by pulling
    #from the online repository I felt it would be more accurate and also give me a chance to learn some curl.
    
    #Print both the hash values.
    echo "Online Hash: $online_hash" 
    echo "Searchsploit Hash: $searchsploit_hash"
    
    if [[ "$online_hash" != "$searchsploit_hash" ]]; then
        echo "Hash values are not the same"
        #If the hash values are different, give the option to keep the file in searchsploit dir, or overwrite with the online version. 
        read -p "Which version of the file do you wish to use 1) Online exploitdb  2) searchsploit directory file? (1 or 2) " reply

        if [[ "$reply" == "1" ]]; then
            #Pull the desired exploit from online repository and overwrite the version in searchsploit dir.
            sudo curl -o "$searchsploit_path" "https://www.exploit-db.com/download/$filename"

            #Since we are downloading the online version of the file we can remove the old exploit file that was downloaded to our cwd
            sudo rm $filename*
            #Copy the file that was curled to the exploit folder
            sudo cp "$searchsploit_path" "$exploit_folder/"
            echo
            echo "Information about the exploit you downloaded:"
            sudo searchsploit -p $filename

        else
            echo "Using the current searchsploit db version of the file. Ignoring the online version."
            echo "A copy of the exploit can be found at: $exploit_folder"
            sudo cp "$searchsploit_path" "$exploit_folder/"
            sudo rm $filename*
            echo
            echo "Information about the exploit you downloaded:"
            sudo searchsploit -p $filename
        fi
    fi

    if [[ "$online_hash" == "$searchsploit_hash" ]]; then
        echo "File verified successfully. Hash values match."
        sudo cp "$searchsploit_path" "$exploit_folder/"
        echo "A copy of the exploit can be found at: $exploit_folder"
        echo
        echo "Information about the exploit you downloaded:"
        sudo searchsploit -p $filename
        
    fi
}

#Call the initial setup function to check if exploitdb is installed and update the searchsploit db.
initial_setup
#Call the main function to start the program.
main